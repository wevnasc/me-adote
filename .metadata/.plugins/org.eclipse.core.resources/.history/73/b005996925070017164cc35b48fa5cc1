package com.meadote.adoption.pet;

import java.util.Collection;
import java.util.stream.Collectors;

import org.apache.commons.httpclient.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.meadote.adoption.owner.Owner;
import com.meadote.adoption.owner.OwnerRepository;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class PetController {

	private final PetRepository petRepository;
	private final OwnerRepository ownerRepository;

	@Autowired
	public PetController(PetRepository petRepository, OwnerRepository ownerRepository) {
		this.petRepository = petRepository;
		this.ownerRepository = ownerRepository;
	}

	@RequestMapping(path = "owners/{ownerId}/pets", method = RequestMethod.GET)
	public Collection<Resource<Pet>> findAll(@PathVariable Long ownerId) {
		this.validateOwner(ownerId);
		Collection<Pet> pets = petRepository.findByOwnerId(ownerId);
		return pets.stream().map(pet -> {
			return getPetResource(ownerId, pet);
		}).collect(Collectors.toList());
	}

	@RequestMapping(path = "owners/{ownerId}/pets/{petId}", method = RequestMethod.GET)
	public Pet findOne(@PathVariable Long ownerId, @PathVariable Long petId) {
		this.validateOwner(ownerId);
		Pet pet = petRepository.findOne(petId);
		return pet;
	}

	@RequestMapping(path = "owners/{ownerId}/pets", method = RequestMethod.POST)
	public Pet store(@PathVariable Long ownerId, @RequestBody Pet input) {
		this.validateOwner(ownerId);
		Owner owner = ownerRepository.findOne(ownerId);
		input.setOwner(owner);
		return petRepository.save(input);
	}

	private Resource<Pet> getPetResource(long ownerId, Pet pet) {
		this.validateOwner(ownerId);
		Resource<Pet> petResource = new Resource<Pet>(pet);
		petResource.add(linkTo(methodOn(PetController.class).findOne(ownerId, pet.getId())).withSelfRel());
		return petResource;
	}
	
	private void validateOwner(long id) {
		Owner owner = this.ownerRepository.findOne(id);
		if(owner == null) {
			throw new UserNotFoundException(id);
		}
	}
	
	class UserNotFoundException extends RuntimeException {

		public UserNotFoundException(long id) {
			super("could not find user '" + id + "'.");
		}
	}

}
